-- Set storage engine to InnoDB
SET default_storage_engine=InnoDB;
-- Delete database if it currently exists
DROP DATABASE IF EXISTS FUELSTOCK_BETA;
-- Create database with utf8mb4 character set and utf8mb4_unicode_ci collation
CREATE DATABASE FUELSTOCK_BETA CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
-- Use the newly created database
USE FUELSTOCK_BETA;



DROP TABLE IF EXISTS REF_FUEL_TYPES; -- Delete the table if it exists, then create it
CREATE TABLE REF_FUEL_TYPES (
    FUEL_TYPE_CODE INT(2) UNSIGNED NOT NULL AUTO_INCREMENT, -- Primary key - cannot be negative, or null
    FUEL_TYPE_NAME ENUM ('Petrol', 'Diesel', 'Electricity') NOT NULL, -- Name of fuel type. enum of 3 values
    FUEL_TYPE_DESCRIPTION VARCHAR(64) NOT NULL, -- Description of fuel type. varchar of length 64
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    PRIMARY KEY (FUEL_TYPE_CODE)
);
INSERT INTO REF_FUEL_TYPES (FUEL_TYPE_NAME, FUEL_TYPE_DESCRIPTION) VALUES ('Petrol', 'Standard unleaded gasoline');
INSERT INTO REF_FUEL_TYPES (FUEL_TYPE_NAME, FUEL_TYPE_DESCRIPTION) VALUES ('Diesel', 'Diesel fuel for diesel engines');
INSERT INTO REF_FUEL_TYPES (FUEL_TYPE_NAME, FUEL_TYPE_DESCRIPTION) VALUES ('Electricity', 'Electric power for electric vehicles');

DROP TABLE IF EXISTS REF_TRANSACTION_TYPES; -- Delete the table if it exists, then create it
CREATE TABLE REF_TRANSACTION_TYPES (
    TRANSACTION_TYPE_CODE INT UNSIGNED NOT NULL AUTO_INCREMENT, -- Primary key - cannot be negative, or null
    TRANSACTION_TYPE_NAME ENUM ('Purchase', 'Sale', 'Refund') NOT NULL, -- Name of transaction type. enum of 3 values
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    PRIMARY KEY (TRANSACTION_TYPE_CODE)
);
INSERT INTO REF_TRANSACTION_TYPES (TRANSACTION_TYPE_NAME) VALUES (1);
INSERT INTO REF_TRANSACTION_TYPES (TRANSACTION_TYPE_NAME) VALUES (2);
INSERT INTO REF_TRANSACTION_TYPES (TRANSACTION_TYPE_NAME) VALUES (3);

DROP TABLE IF EXISTS FUEL_PRICES; -- Delete the table if it exists, then create it
CREATE TABLE FUEL_PRICES (
    FUEL_PRICE_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
    FUEL_TYPE_CODE SMALLINT(2) UNSIGNED NOT NULL,
    FUEL_PRICE_DATE DATE NOT NULL,
    UNIT_BUYING_PRICE DOUBLE UNSIGNED NOT NULL,
    UNIT_SALES_PRICE DOUBLE UNSIGNED NOT NULL,
    CURRENCY_SYMBOL VARCHAR(10) NOT NULL DEFAULT 0xE282AC,
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    PRIMARY KEY (FUEL_PRICE_ID),
    FOREIGN KEY (FUEL_TYPE_CODE) REFERENCES REF_FUEL_TYPES(FUEL_TYPE_CODE)
);

DROP TABLE IF EXISTS FUEL_STOCK_LEVELS; -- Delete the table if it exists, then create it
CREATE TABLE FUEL_STOCK_LEVELS (
    STOCK_LEVEL_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
    STOCK_RECORDING_DATE DATE NOT NULL,
    FUEL_TYPE_CODE SMALLINT(2) UNSIGNED NOT NULL,
	QUANTITY_IN_STOCK DOUBLE UNSIGNED NOT NULL,
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    PRIMARY KEY (STOCK_LEVEL_ID),
    FOREIGN KEY (FUEL_TYPE_CODE) REFERENCES REF_FUEL_TYPES(FUEL_TYPE_CODE)
);

DROP TABLE IF EXISTS TRANSACTIONS; -- Delete the table if it exists, then create it
CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID SMALLINT(2) UNSIGNED NOT NULL AUTO_INCREMENT,
    FUEL_TYPE_CODE SMALLINT(2) UNSIGNED NOT NULL,
    TRANSACTION_TYPE_CODE INT UNSIGNED NOT NULL,
    TRANSACTION_DATE DATE NOT NULL,
    TRANSACTION_AMOUNT INT,
    OTHER_DETAILS VARCHAR(255),
    CURRENCY_SYMBOL VARCHAR(10) NOT NULL DEFAULT 0xE282AC,
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    PRIMARY KEY (TRANSACTION_ID),
    FOREIGN KEY (FUEL_TYPE_CODE) REFERENCES REF_FUEL_TYPES(FUEL_TYPE_CODE),
    FOREIGN KEY (TRANSACTION_TYPE_CODE) REFERENCES REF_TRANSACTION_TYPES(TRANSACTION_TYPE_CODE)
);

DROP TABLE IF EXISTS USERS; -- Delete the table if it exists, then create it
CREATE TABLE USERS (
    USER_ID INT UNSIGNED NOT NULL AUTO_INCREMENT, -- Primary key - cannot be negative, or null
    USERNAME VARCHAR(32) NOT NULL, 
    PASSWORD_HASH VARCHAR(64) NOT NULL,
    LAST_EDITED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp of last edit
    UNIQUE (USERNAME), -- Username must be unique
    PRIMARY KEY (USER_ID)
);